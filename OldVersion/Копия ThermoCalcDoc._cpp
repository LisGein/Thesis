// ThermoCalcDoc.cpp : implementation of the CThermoCalcDoc class
//

#include "stdafx.h"
#include <math.h>

#include "ThermoCalc.h"
#include "Calc.h"
#include "ThermoCalcDoc.h"
#include "ThermoCalcView.h"
#include "MainFrm.h"
#include "_from_termo.h"

//#include "table.h"
extern int Valence[];
extern double M[];
extern char cf[3];

#pragma warning (disable : 4244)

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

// После разработки должны быть в документе
extern double ENT[120];
extern double S[120];
extern double CP[120];
extern float ALFA[25];
double	P[MaxElemGasFromDB];
double	dMolMas[MaxElemGasFromDB];
double	P_PrP[MaxElemGasFromDB];

/////////////////////////////////////////////////////////////////////////////
// CThermoCalcDoc

IMPLEMENT_DYNCREATE(CThermoCalcDoc, CDocument)

BEGIN_MESSAGE_MAP(CThermoCalcDoc, CDocument)
	//{{AFX_MSG_MAP(CThermoCalcDoc)
		// NOTE - the ClassWizard will add and remove mapping macros here.
		//    DO NOT EDIT what you see in these blocks of generated code!
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CThermoCalcDoc construction/destruction

CThermoCalcDoc::CThermoCalcDoc()
{
	// TODO: add one-time construction code here
	pDlgView = 0;
	pViewOutput = 0;
}

CThermoCalcDoc::~CThermoCalcDoc()
{
}

BOOL CThermoCalcDoc::OnNewDocument()
{
	if (!CDocument::OnNewDocument())
		return FALSE;

	// TODO: add reinitialization code here
	// (SDI documents will reuse this document)
	CMainFrame *pMF = (CMainFrame *)AfxGetMainWnd();
	pDlgView =  pMF ->GetDlgView();

	POSITION pos = GetFirstViewPosition();
	pViewOutput = (CViewOutput *)GetNextView(pos);
	pFrameOutput = (CFrameOutput *)pViewOutput ->GetParentFrame();
	ASSERT (pos == 0);

	return TRUE;
}

/////////////////////////////////////////////////////////////////////////////
// CThermoCalcDoc serialization

void CThermoCalcDoc::Serialize(CArchive& ar)
{
	char c[MaxAtomNameLen];
	memset (c, 0, sizeof(c));
	CString S;
	int i1, i2;

	if (ar.IsStoring())
	{
		// TODO: add storing code here
		ar << calcs.nEditBoxesOx;
		for (i1 = 0; i1<calcs.nEditBoxesOx; i1++) {
			ar << calcs.percent_oxides[i1];
			ar << calcs.nAtomsInStringOx[i1];
			for (i2 = 0; i2<calcs.nAtomsInStringOx[i1]; i2++) {
				//memset(c,0,sizeof(c);
				S = calcs.szNameAtomOfOxides[i1][i2];
				ar << S;
				ar << calcs.factor_oxides[i1][i2];
			}
		}

		ar << calcs.nEditBoxesComb;
		for (i1 = 0; i1<calcs.nEditBoxesComb; i1++) {
			ar << calcs.percent_combust[i1];
			ar << calcs.nAtomsInStringComb[i1];
			for (i2 = 0; i2<calcs.nAtomsInStringComb[i1]; i2++) {
				S = calcs.szNameAtomOfCombust[i1][i2];
				ar << S;
				ar << calcs.factor_combust[i1][i2];
			}
		}

		for (i1 = 0; i1<MaxQuantityAlfa; i1++) {
			ar << calcs.fAlfa[i1];
		}
	}
	else
	{
		// TODO: add loading code here
		ar >> calcs.nEditBoxesOx;
		if (calcs.nEditBoxesOx>MaxEditBoxesOx) {
			//MessageBox(m_hWnd,"Bad thermo file, load abort","Error",MB_OK);
			MessageBox(0,"Bad thermo file, invalid 'calcs.nEditBoxesOx', load abort","Load error",MB_OK);
			return;
		}

		for (i1 = 0; i1<calcs.nEditBoxesOx; i1++) {
			ar >> calcs.percent_oxides[i1];
			ar >> calcs.nAtomsInStringOx[i1];
			if (calcs.nAtomsInStringOx[i1]>MaxAtoms) {
				MessageBox(0,"Bad thermo file, invalid 'calcs.nAtomsInStringOx[i1]', load abort","Load error",MB_OK);
				return;
			}
			for (i2 = 0; i2<calcs.nAtomsInStringOx[i1]; i2++) {
				//memset(c,0,sizeof(c);
				ar >> S;
				if (S.GetLength()>MaxAtomNameLen) {
					MessageBox(0,"Bad thermo file, invalid 'calcs.szNameAtomOfOxides[i1][i2]', load abort","Load error",MB_OK);
					return;
				}
				strcpy(calcs.szNameAtomOfOxides[i1][i2],S);
				ar >> calcs.factor_oxides[i1][i2];
			}
		}

		ar >> calcs.nEditBoxesComb;
		if (calcs.nEditBoxesComb>MaxEditBoxesComb) {
			MessageBox(0,"Bad thermo file, invalid 'calcs.nEditBoxesComb', load abort","Error",MB_OK);
			return;
		}
		for (i1 = 0; i1<calcs.nEditBoxesComb; i1++) {
			ar >> calcs.percent_combust[i1];
			ar >> calcs.nAtomsInStringComb[i1];
			if (calcs.nAtomsInStringComb[i1]>MaxAtoms) {
				MessageBox(0,"Bad thermo file, invalid 'calcs.nAtomsInStringComb[i1]', load abort","Error",MB_OK);
				return;
			}
			for (i2 = 0; i2<calcs.nAtomsInStringComb[i1]; i2++) {
				ar >> S;
				if (S.GetLength()>MaxAtomNameLen) {
					MessageBox(0,"Bad thermo file, invalid 'calcs.szNameAtomOfCombust[i1][i2]', load abort","Load error",MB_OK);
					return;
				}
				strcpy(calcs.szNameAtomOfCombust[i1][i2],S);
				ar >> calcs.factor_combust[i1][i2];
			}
		}

		for (i1 = 0; i1<MaxQuantityAlfa; i1++) {
			ar >> calcs.fAlfa[i1];
		}

	}
}

/////////////////////////////////////////////////////////////////////////////
// CThermoCalcDoc diagnostics

#ifdef _DEBUG
void CThermoCalcDoc::AssertValid() const
{
	CDocument::AssertValid();
}

void CThermoCalcDoc::Dump(CDumpContext& dc) const
{
	CDocument::Dump(dc);
}
#endif //_DEBUG

/////////////////////////////////////////////////////////////////////////////
// CThermoCalcDoc commands

BOOL CThermoCalcDoc::Calc(CALCSTRUCT &cs)
{
	calcs = cs;

	// Если нужно расчитать УХФ
	CalcUXF(cs);

	chem_dataGas cdG[MaxElemGasFromDB];
	chem_dataCond cdC[MaxElemCondFromDB];

#ifdef YELLOW
	// Желтая методичка
	strcpy(szAtomsOfF[0],"H");
	fConditChimFormF[0] = 0.0484*1000/M[GetSN(szAtomsOfF[0])];
	strcpy(szAtomsOfF[1],"C");
	fConditChimFormF[1] = 0.1371*1000/M[GetSN(szAtomsOfF[1])];
	strcpy(szAtomsOfF[2],"O");
	fConditChimFormF[2] = 0.4032*1000/M[GetSN(szAtomsOfF[2])];
	strcpy(szAtomsOfF[3],"Cl");
	fConditChimFormF[3] = 0.2233*1000/M[GetSN(szAtomsOfF[3])];
	strcpy(szAtomsOfF[4],"N");
	fConditChimFormF[4] = 0.1371*1000/M[GetSN(szAtomsOfF[4])];
	strcpy(szAtomsOfF[5],"Al");
	float sss = 1-(0.0484+0.1371+0.4032+0.2233+0.1371);
	fConditChimFormF[5] = sss*1000/M[GetSN(szAtomsOfF[5])];
	nQuantityElemInFuel = 6;
#endif

	nPGas = GetPossibleChemCombinGas(cdG,uxf.szAtomsOfF,uxf.nQuantityElemInFuel);
	nPCond = GetPossibleChemCombinCond(cdC,uxf.szAtomsOfF,uxf.nQuantityElemInFuel);
	nPAll = nPGas + nPCond;

	szNam[0][0] = 0;
//*************************************
//	Начало кода взаимодействия с termo
//*************************************

// Перенести в начало газообр. хим. соединения являющиеся прост. хим. эл.
	int _M=0;
	chem_dataGas cdr;
	BOOL bWasFound;
	for (int s=0;s<nPGas;s++) {
		int nQuantAtomsFromDB =
			TransNameMolecToAandF(szElemsFromDB,fT,cdG[s].view);

		if ((nQuantAtomsFromDB!=1)||(fT[0]!=1)) {
			bWasFound=FALSE;
			for (int s2=s+1;s2<nPGas;s2++) {
				int nQuantAtomsFromDB =
					TransNameMolecToAandF(szElemsFromDB,fT,cdG[s2].view);			
				if ((nQuantAtomsFromDB==1)&&(fT[0]==1)) {
					cdr=cdG[s];
					cdG[s]=cdG[s2];
					cdG[s2]=cdr;
					bWasFound=TRUE;
					_M++;
					break;
				}
			}
			if(!bWasFound) break; // Конец
		}
		else
			_M++;
	}

	nMaxNamesLen =0;
	for (int cur_elem=1;cur_elem<=nPGas;cur_elem++) {
		strcpy(szNam[cur_elem],cdG[cur_elem-1].view);
		if (strlen(szNam[cur_elem])>nMaxNamesLen)
			nMaxNamesLen=strlen(szNam[cur_elem]);
	}

	for (cur_elem=1;cur_elem<=nPCond;cur_elem++) {
		strcpy(szNam[nPGas+cur_elem],"k*");
		strcpy(&szNam[nPGas+cur_elem][2],cdC[cur_elem-1].view);
		if (strlen(szNam[cur_elem])>nMaxNamesLen)
			nMaxNamesLen=strlen(szNam[cur_elem]);
	}

	for (cur_elem=1;cur_elem<=nPAll;cur_elem++) {
		unsigned int s1 = strlen(szNam[cur_elem]);
		szNam[cur_elem][s1] = ':'; 
		s1++;
		for (s1;s1<nMaxNamesLen+1;s1++)
			szNam[cur_elem][s1] = ' ';
		szNam[cur_elem][s1] = 0; 
	}

	memset(_MC,0,sizeof(_MC));
	for(cur_elem=1;cur_elem<=uxf.nQuantityElemInFuel;cur_elem++)
		_MC[GetSN(uxf.szAtomsOfF[cur_elem-1])]=uxf.fConditChimFormF[cur_elem-1];

	memset(_XF1,0,sizeof(_XF1));
	memset(_XF2,0,sizeof(_XF2));

	int	X,Y;
	for (int i=1;i<=nPGas;i++) {
		// Перепишем молекулу из БД в список по атомам
		int nQuantAtomsFromDB =
			TransNameMolecToAandF(szElemsFromDB,fT,cdG[i-1].view);
		if (nQuantAtomsFromDB>MaxAtoms) {
			wsprintf(Mstr,"Соединение <%s> из БД,\
				\n состоит из более 'MaxAtoms' элементов.",cdG[i-1].view);
			MessageBox(0,Mstr,"Message",0);
		}

		X=Y=1;
		for (int j=0;j<nQuantAtomsFromDB;j++) {
			_XF1[i]+=GetSN(szElemsFromDB[j])*X;
			_XF2[i]+=fT[j]*Y;
			fT[j]=0;
			X=X*100;
			Y=Y*10;
		}
	}

	for (i=1;i<=nPCond;i++) {
		// Перепишем молекулу из БД в список по атомам
		int nQuantAtomsFromDB =
			TransNameMolecToAandF(szElemsFromDB,fT,cdC[i-1].view);
		if (nQuantAtomsFromDB>4) {
			wsprintf(Mstr,"Конденс. соединение <%s> из БД,\
				\n состоит из более 4 элементов.",cdC[i-1].view);
			MessageBox(0,Mstr,"Message",0);
		}

		X=Y=1;
		for (int j=0;j<nQuantAtomsFromDB;j++) {
			_XF1[nPGas+i]+=GetSN(szElemsFromDB[j])*X;
			_XF2[nPGas+i]+=fT[j]*Y;
			fT[j]=0;
			X=X*100;
			Y=Y*10;
		}
		_XF1[nPGas+i] = -_XF1[nPGas+i];
	}

	BOOL F0T=FALSE;	BOOL FPP=FALSE;
	float CK=0;
	BOOL CKACH=FALSE;	BOOL FIS=FALSE;	BOOL KAMEPA=FALSE;	BOOL FKP=FALSE;	BOOL FT=FALSE;
	float P1=0;
	BOOL F3C=FALSE;	BOOL FV=FALSE;
	float MS=0;	float E=0;	float Q=0;	float R=0;	float T2=0;	float T1=0;	float T3AM=0;	float P2=0;
	double R0=0;	double W=0;	double DT=0;	double C=0;
	BOOL FP3=FALSE;	BOOL FB=FALSE;
	int HAC[5];//,LRF;
	float fSum, fSum2;

	int _NG=nPGas;
	int _N=nPAll;
	int _JE;
//	init_var_of_TERMO1 (M,_JE);	// FF=FE=FT=FV=FALSE;R0=1.98719;E1=5E-5;E2=5E-4;MU;CC=0;HAC;
//FT,FV,R0,HAC[]
	memset(P,0,sizeof(P));
	init_var_of_TERMO1 (M,_JE,FT,FV,R0,HAC);
LB1:
	init_var_of_TERMO2 ();			// IA=1;IPK=1;IPA=0;
	Init_CALBR_STREAM();

//	CALBR();
//FIS,FT,FV,T3AM=1500,HAC[]
	CALBR(FIS,FT,FV,T3AM,HAC);
//	init_var_of_TERMO3();
//FKP
	init_var_of_TERMO3(FKP,FB);
LB:
	init_var_of_TERMO4(_N,_NG);


	if (_JE==0) {
		_JE=2;
		goto LB4;
	}
LB2_MENJE:
//	MENJE (_MC,_M,_JE);
//F0T,FPP,CKACH,FIS,KAMEPA,FKP,FT,F3C,FV,H,T3AM,P1,IS,T,SS,T2,T1,PP,P2
	MENJE (_MC,_M,_JE,F0T,FPP,CKACH,FIS,KAMEPA,FKP,
		FT,F3C,FV,FP3,H,T3AM,P1,IS,T,SS,T2,T1,PP,P2);

#ifdef YELLOW
	// Желтая методичка
	// из-за несоответствия данных на псевдо-перфокартах в проц. 'MENJE'
	PP = 4;		// в МПа
	H = -2000;	// в килоджоулях
	for(cur_elem=1;cur_elem<=nQuantityElemInFuel;cur_elem++)
		_MC[GetSN(szAtomsOfF[cur_elem-1])]=fConditChimFormF[cur_elem-1];
	_M = nQuantityElemInFuel;
	F0T=FALSE;
#endif
//CH4 + O2
	PP = (float)(0.1/1.03323);	// в МПа
	//H = -4942;	// в килоджоулях
	//H = -7253;	// в килоджоулях O2 CH4

// O2 + C
// T = 2000
// Alpha = 0.5;
// УХФ: C 35.701 O 35.701
// I = -19204+O4
	H = (float) -1920.4;
	T = 2000;

	memset(_MC,0,sizeof(_MC));
	for(cur_elem=1;cur_elem<=uxf.nQuantityElemInFuel;cur_elem++)
		_MC[GetSN(uxf.szAtomsOfF[cur_elem-1])]=uxf.fConditChimFormF[cur_elem-1];
	_M = uxf.nQuantityElemInFuel;
	F0T=FALSE;
	ALFA[1] = calcs.fAlfa[0];

	fSum = 0;
	for (cur_elem=0;cur_elem<_M;cur_elem++)
		fSum += M[GetSN(uxf.szAtomsOfF[cur_elem])]*uxf.fConditChimFormF[cur_elem];

	if ((F0T)||(_JE==1))
		goto LB6;
LB4:

	if (FPP) {
//		FIRST(_XF1,_XF2,_MC,_M,_N,_NG);
//FPP
		FIRST(_XF1,_XF2,_MC,_M,_N,_NG,FPP,P);
// My code
		for (cur_elem=1;cur_elem<=nPAll;cur_elem++)
			gcvt(P[cur_elem],6,&szNam[cur_elem][nMaxNamesLen+1]);
		fSum = 0;
		for (cur_elem=1;cur_elem<=nPAll;cur_elem++)
			if (P[cur_elem]>0) fSum += P[cur_elem];
	}
	
	if (_JE==2) {
LB3_CALFN:
		CALFN(_N,_NG,CK,T,CKACH,T2,T1,cdG,cdC);
// My code
		for (cur_elem=1;cur_elem<=nPAll;cur_elem++)
			gcvt((S[cur_elem]*4.1868),8,&szNam[cur_elem][nMaxNamesLen+1]);
		for (cur_elem=1;cur_elem<=nPAll;cur_elem++)
			gcvt((ENT[cur_elem]*4.1868),8,&szNam[cur_elem][nMaxNamesLen+1]);
		for (cur_elem=1;cur_elem<=nPAll;cur_elem++)
			gcvt((CP[cur_elem]*4.1868),8,&szNam[cur_elem][nMaxNamesLen+1]);
	}

	CK = 0;
	CKACH = FALSE;

//	PABHPAC(_XF1,_XF2,_M,_N,_NG);
//FPP,F3C,CK,R0,MS,CPR,T3AM,IS,T,SS,E,PP,HAC[]
	PABHPAC(_XF1,_XF2,_M,_N,_NG,FPP,F3C,FB,FP3,CK,
		R0,MS,CPR,T3AM,IS,T,SS,E,PP,HAC);
	IS = IS * 4.1868;
	SS = SS * 4.1868;
	CPR = CPR * 4.1868;
// My code
	for (cur_elem=1;cur_elem<=nPAll;cur_elem++)
		gcvt(P[cur_elem],6,&szNam[cur_elem][nMaxNamesLen+1]);
	// Расчет мольных масс для всех соединений
	memset(dMolMas,0,sizeof(dMolMas));
	for (i=0;i<nPGas;i++) {
		int nQuantAtomsFromDB =
			TransNameMolecToAandF(szElemsFromDB,fT,cdG[i].view);
		for (int i3=0;i3<nQuantAtomsFromDB;i3++)
			dMolMas[i+1] += fT[i3]*M[GetSN(szElemsFromDB[i3])];
	}
	for (i=0;i<nPCond;i++) {
		int nQuantAtomsFromDB =
			TransNameMolecToAandF(szElemsFromDB,fT,cdC[i].view);
		for (int i3=0;i3<nQuantAtomsFromDB;i3++)
			dMolMas[nPGas+i+1] += fT[i3]*M[GetSN(szElemsFromDB[i3])];
	}
	for (cur_elem=1;cur_elem<=nPAll;cur_elem++)
		gcvt(dMolMas[cur_elem],6,&szNam[cur_elem][nMaxNamesLen+1]);

	// балланс - по уравнениям сохранения элементов
	char cRes[MAX_len];
 	float fResSum;
	for (i=0;i<_M;i++) {
		fResSum = 0;
		TransNameMolecToAandF(szElemsFromDB,fT,cdG[i].view);
		strcpy(cRes,szElemsFromDB[0]);
		for (int i2=_M;i2<_NG;i2++) {
			if (P[i2+1]>0) {
				int nQuantAtomsFromDB =
					TransNameMolecToAandF(szElemsFromDB,fT,cdG[i2].view);
				for (int i3=0;i3<nQuantAtomsFromDB;i3++) {
					if (!strcmp(cRes,szElemsFromDB[i3])) {
						fResSum += P[i2+1]*fT[i3];
					}
				}
			}
		}
		gcvt(fResSum,6,&szNam[i+1][nMaxNamesLen+1]);
		int sn = GetSN(cRes);
		_MC[sn] = fResSum;
	}


	for (cur_elem=1;cur_elem<=nPAll;cur_elem++)
		gcvt(P[cur_elem],6,&szNam[cur_elem][nMaxNamesLen+1]);

/*
	int	sort;
	// Astra view мольные доли <PrM>
	sort = 1;
	for (cur_elem=1;cur_elem<=nPAll;cur_elem++) {
		if (P[cur_elem]>0) {
			strncpy(szNamASTRA_PrM[sort],szNam[cur_elem],nMaxNamesLen+1);
			buffer = _fcvt(P[cur_elem],precision*2,&decimal,&sign);
			if (abs(decimal)>precision-1) {
				continue;
				for (int ii=0;ii<precision;ii++)
					szNamASTRA_PrM[sort][nMaxNamesLen+1+ii]='0';
			}
			else
				strcpy(&szNamASTRA_PrM[sort][nMaxNamesLen+1],buffer);
			szNamASTRA_PrM[sort][nMaxNamesLen+1+precision] = 0;

			if (decimal>0)
				strcpy(&szNamASTRA_PrM[sort][strlen(szNamASTRA_PrM[sort])],"+O");
			else
				strcpy(&szNamASTRA_PrM[sort][strlen(szNamASTRA_PrM[sort])],"-O");

			gcvt(abs(decimal),3,&szNamASTRA_PrM[sort][strlen(szNamASTRA_PrM[sort])]);
			sort ++;
		}
	}
	for (cur_elem=sort;cur_elem<=nPAll;cur_elem++)
		szNamASTRA_PrM[cur_elem][0] = 0;

	// Astra view Парциальное давление <PrP> МПа
	fSum = 0;
	for (cur_elem=1;cur_elem<=nPAll;cur_elem++)
		if (P[cur_elem]>0)
				fSum += P[cur_elem];
	memset(P_PrP,0,MaxElemGasFromDB*sizeof(double));
	sort = 1;
	for (cur_elem=1;cur_elem<=nPAll;cur_elem++) {
		if (P[cur_elem]>0) {
			strncpy(szNamASTRA_PrP[sort],szNam[cur_elem],nMaxNamesLen+1);
			buffer = _fcvt(P[cur_elem]/fSum*PP,precision*2,&decimal,&sign);
			P_PrP[cur_elem] = P[cur_elem]/fSum*PP;
			if (abs(decimal)>precision-1) {
				continue;
				for (int ii=0;ii<precision;ii++)
					szNamASTRA_PrP[sort][nMaxNamesLen+1+ii]='0';
			}
			else
				strcpy(&szNamASTRA_PrP[sort][nMaxNamesLen+1],buffer);
			szNamASTRA_PrP[sort][nMaxNamesLen+1+precision] = 0;

			if (decimal>0)
				strcpy(&szNamASTRA_PrP[sort][strlen(szNamASTRA_PrP[sort])],"+O");
			else
				strcpy(&szNamASTRA_PrP[sort][strlen(szNamASTRA_PrP[sort])],"-O");

			gcvt(abs(decimal),3,&szNamASTRA_PrP[sort][strlen(szNamASTRA_PrP[sort])]);
			sort ++;
		}
	}
	for (cur_elem=sort;cur_elem<=nPAll;cur_elem++)
		szNamASTRA_PrP[cur_elem][0] = 0;
*/
//	for (cur_elem=1;cur_elem<=nPAll;cur_elem++)	P[cur_elem]=0;	P[1]=0.01885;	P[2]=0.0053818;	P[3]=0.043882;	
//	P[4]=0.0000018870;	P[5]=0.024586;	P[6]=0.0072843;	P[7]=0.000014083;	P[8]=0.0000000024889;	P[9]=0.000000069757;
	fSum2 = 0;
	for (cur_elem=1;cur_elem<=nPAll;cur_elem++) {
		if (P[cur_elem]>0) {
			// Перепишем молекулу из БД в список по атомам
			//int nQuantAtomsFromDB =	TransNameMolecToAandF(szElemsFromDB,fT,cdG[cur_elem-1].view);
			//float fSumOne = 0;
			//for (int i=0;i<nQuantAtomsFromDB;i++)
				//fSumOne += M[GetSN(szElemsFromDB[i])]*fT[i];
			//fSum += P[cur_elem]*fSumOne;
			fSum2 += P[cur_elem]/fSum;
		}
	}
	fSum2 = fSum2/1.03323;
//	fSum2 = fSum2*PP*1.03323;

 	if (FIS)
		goto LB5_PRINT;
//POISKT:

	if ((!KAMEPA)&&(!FKP)) {
		if (FT) {
			if ((P1==0)&&(F3C))
				goto LB3_CALFN;
			else
				goto LB5_PRINT;
		}
	}

	if (KAMEPA) {
		if (FV) {			// Если постоянный объем
			IS=IS-R0*T/MS;
			W=IS;
		}
		else {
			W=IS;
			C=CPR;
		}
	}
	else {
		W = SS;
		C = CPR/T;
	}

	if (E!=0) {
		Q = E;
		if (!KAMEPA)
			E = E/T;
		if (((W-H)*E>0)&&(fabs((double)(W-H))<=fabs((double)E))) {
			R = (W-H)/E;
			IS = IS-Q*R;
			SS = SS-Q*R/T;
			goto LB5_PRINT;
		}
	}
	T = T-0.001*SIGN(W-H);
	DT=(W-H)/C;

	if (fabs((double)DT)>T*0.12) {
		DT=T*0.12*SIGN(DT);
	}
	
	if (DT>0)
		T2=T;
	else
		T1=T;

	if ((!KAMEPA)&&(!F3C)) {
		if (T2<T3AM) {
LP3:
			P1 = PP;
			PP = 2*PP;
			P2 = 0;
			FP3 = TRUE;
			T = T3AM;
			T2 = T;
			T1 = 0;
			goto LB3_CALFN;
		}
	}

	if ((T2-T1- fabs((double)DT) )<0.1) {
		if ((T2-T1)<100)
			CKACH = TRUE;
		DT=(T2-T1)*SIGN(DT)/2;
	}

	if (fabs((double)DT)>0.3) {
		T = T-DT;
		FB = TRUE;
		if (FPP)
//			FIRST(_XF1,_XF2,_MC,_M,_N,_NG);
		//FPP
			FIRST(_XF1,_XF2,_MC,_M,_N,_NG,FPP,P);
		goto LB3_CALFN;
	}
// ... Пропущен вывод на экран

	if ((!KAMEPA)&&(T<T3AM)&&(!F3C))
		goto LP3;
LB5_PRINT:
	//CALL PRINT;
	
	//My code
	goto METKA;
	//My code end
	
	goto LB2_MENJE;

LB6:
	//}

	if (_JE==1) {
//		HAC=0;
		for (i=0;i<5;i++)	// Warning! size HAS[] is ?
			HAC[i]=0;
		//LRF=0;
		goto LB1;
	}

	if (F0T) {
		_JE=0;
		//CALL SORTV(...);
		goto LB;
	}
	//}
	//END METKA;
	//END TERMO;

METKA:
//	GetCurrentCalcDoc() -> Up();	// Вывод результатов расчета в окно вывода

	// Если нужно открыть новое окно вывода результата
	//((CMainFrame*)AfxGetMainWnd()) -> GetOutputDocTemplate() -> OpenDocumentFile(NULL);
	return TRUE;

}

BOOL CThermoCalcDoc::CalcAndShow(CALCSTRUCT &cs)
{
	if (!Calc(cs)) {
		return FALSE;
	}

	Show();
	return TRUE;
}

void CThermoCalcDoc::Show()
{
// Нужна поддержка опций вывода результатов
	pDlgView ->GetOptionsFromDlg(CThermoCalcDoc::os);

	switch (os.nShowOption)
	{
		case nFull:
			ShowFull();
			break;

		case nShort:
			ShowShort();
			break;
	}

//	CWnd *pW = CWnd::FromHandle(GetActiveWindow());
	// Активизировать окно вывода
	if ( ((CMDIFrameWnd *)AfxGetMainWnd()) ->MDIGetActive() != pFrameOutput )
		((CMDIFrameWnd *)AfxGetMainWnd()) ->MDIActivate(pFrameOutput);

}

void CThermoCalcDoc::ShowFull()
{
	char szOut[MAX_len];
	int  decimal, sign;
	int	precision = 8;
	char *buffer;
	//char c[80];
	CString S;
	float fSum;
	int cur_elem;

	SetModifiedFlag();
	CRichEditCtrl *pE = &(pViewOutput ->GetRichEditCtrl( ));
	pE ->ReplaceSel("Температура = ");
	ToDotString( T, S);		//_gcvt();- Но она вставляет экспоненту если есть только одни сотые доли
	pE ->ReplaceSel( S );
	pE ->ReplaceSel(" К;");
	pE ->ReplaceSel( cf );
	S.Empty();

	pE ->ReplaceSel("Энтальпия = ");
	ToDotString(IS, S);
	pE ->ReplaceSel( S );
	pE ->ReplaceSel(" кДж/кг;");
	pE ->ReplaceSel( cf );
	S.Empty();

	// умножить на 1.03323 для Па
	pE ->ReplaceSel("Давление в КС = ");
	ToDotString(PP, S);
	pE ->ReplaceSel( S );
	pE ->ReplaceSel(" МПа;");
	pE ->ReplaceSel( cf );
	S.Empty();

	switch (os.nPressureOption) {
		case nPrM:
			pE ->ReplaceSel("Мольные доли (моль/кг), Astra view, <PrM>:");
			pE ->ReplaceSel(cf);
			// Astra view мольные доли <PrM> моль/кг
			for (cur_elem=1;cur_elem<=nPAll;cur_elem++) {
				strncpy(szOut, szNam[cur_elem], nMaxNamesLen+1);
				if (P[cur_elem]>0)
					buffer = _fcvt(P[cur_elem],precision*2,&decimal,&sign);
				else
					buffer = _fcvt(exp(P[cur_elem]),precision*4,&decimal,&sign);

				if (abs(decimal)>precision) {
					continue;
					//for (int ii=0;ii<precision;ii++)
					//	szOut[nMaxNamesLen+1+ii]='0';
				}
				else
					strcpy(&szOut[nMaxNamesLen+1],buffer);
				szOut[nMaxNamesLen+1+precision] = 0;

				if (decimal>0)
					strcpy(&szOut[strlen(szOut)],"+O");
				else
					strcpy(&szOut[strlen(szOut)],"-O");

				gcvt(abs(decimal),3,&szOut[strlen(szOut)]);
				// Show
				pE ->ReplaceSel(szOut);	//CEdit
				pE ->ReplaceSel(cf);
			}
		break;

		case nPrP:
			pE ->ReplaceSel("Парциальные давления (МПа), Astra view, <PrP>:");
			pE ->ReplaceSel(cf);
			fSum = 0;
			for (cur_elem=1;cur_elem<=nPAll;cur_elem++)
				if (P[cur_elem]>0)
					fSum += P[cur_elem];
			// Astra view Парциальное давление <PrP> МПа
			for (cur_elem=1;cur_elem<=nPAll;cur_elem++) {
				strncpy(szOut, szNam[cur_elem], nMaxNamesLen+1);
				if (P[cur_elem]>0)
					buffer = _fcvt(PP*P[cur_elem]/fSum,precision*2,&decimal,&sign);
				else
					buffer = _fcvt(PP*exp(P[cur_elem])/fSum,precision*4,&decimal,&sign);

				if (abs(decimal)>precision) {
					continue;
					//for (int ii=0;ii<precision;ii++)
					//	szOut[nMaxNamesLen+1+ii]='0';
				}
				else
					strcpy(&szOut[nMaxNamesLen+1],buffer);
				szOut[nMaxNamesLen+1+precision] = 0;

				if (decimal>0)
					strcpy(&szOut[strlen(szOut)],"+O");
				else
					strcpy(&szOut[strlen(szOut)],"-O");

				gcvt(abs(decimal),3,&szOut[strlen(szOut)]);
				// Show
				pE ->ReplaceSel(szOut);	//CEdit
				pE ->ReplaceSel(cf);
			}
		break;

	}
}

void CThermoCalcDoc::ShowShort()
{

}

//BOOL CThermoCalcDoc::DoSave(LPCTSTR lpszPathName, BOOL bReplace) {return CDocument::DoSave(lpszPathName, bReplace);}

BOOL CThermoCalcDoc::CalcUXF(CALCSTRUCT &cs)
{
//"Условная хим. формула окислителя:";
	int cur_molecule;
	float fMolecWeightO[MaxEditBoxes];								// Молекулярные веса компонентов окислителя
	memset (fMolecWeightO,0,sizeof(fMolecWeightO));
	float fWeightPortionsO[MaxEditBoxes][MaxAtoms];			// Весовые доли
	memset (fWeightPortionsO,0,sizeof(fWeightPortionsO));

	for(cur_molecule=0;cur_molecule<calcs.nEditBoxesOx;cur_molecule++)
	{
		int index;
// Расчитываем молекулярные веса компонентов окислителя
		for(int cur_atom=0;cur_atom<calcs.nAtomsInStringOx[cur_molecule];cur_atom++)
		{	// Осутствует проверка GetSN
			index = GetSN(calcs.szNameAtomOfOxides[cur_molecule][cur_atom]);
			fMolecWeightO[cur_molecule] += (float)M[index]
				* calcs.factor_oxides[cur_molecule][cur_atom];
		}

		//fWeightPortionsO[cur_molecule] = new float[calcs.nAtomsInStringOx[cur_molecule]];
// Расчитываем весовые доли элементов в компонентах окислителя
		for(cur_atom=0;cur_atom<calcs.nAtomsInStringOx[cur_molecule];cur_atom++)
		{	// Осутствует проверка GetSN
			index = GetSN(calcs.szNameAtomOfOxides[cur_molecule][cur_atom]);
			fWeightPortionsO[cur_molecule][cur_atom] = (float)(M[index] * calcs.factor_oxides[cur_molecule][cur_atom])
				/fMolecWeightO[cur_molecule];
		}
	}
	// Проверка
	for(cur_molecule=0;cur_molecule<calcs.nEditBoxesOx;cur_molecule++)
		for(int cur_atom=0;cur_atom<calcs.nAtomsInStringOx[cur_molecule];cur_atom++)
			float f = fWeightPortionsO[cur_molecule][cur_atom];

// Весовое содержание элементов в окислителе
	float fWeightContentO[MaxAtoms];
	memset (fWeightContentO,0,sizeof(fWeightContentO));
	int nCurWeightContentO;

	char szWasO[MaxAtoms][MaxAtomNameLen];
	memset (szWasO,0,sizeof(szWasO));
	int nWasO[MaxAtoms];
	memset (nWasO,0,sizeof(nWasO));
	int	nCurWasO=0;

	nCurWeightContentO = 0;
	for(cur_molecule=0;cur_molecule<calcs.nEditBoxesOx;cur_molecule++)
	{
		BOOL bWasFlag;
		for(int cur_atom=0;cur_atom<calcs.nAtomsInStringOx[cur_molecule];cur_atom++)
		{
			bWasFlag = FALSE;
			for(int f=0;f<nCurWasO;f++)
				if (!strcmp(szWasO[f], calcs.szNameAtomOfOxides[cur_molecule][cur_atom]) )
				{
					bWasFlag = TRUE;
					break;
				}
			
			if (bWasFlag)	// szWas[f] индекс повторяющегося элемента
			{
				fWeightContentO[nWasO[f]] += calcs.percent_oxides[cur_molecule]
					*fWeightPortionsO[cur_molecule][cur_atom];
			}
			else
			{
				strcpy (szWasO[nCurWasO],calcs.szNameAtomOfOxides[cur_molecule][cur_atom]);
				nWasO[nCurWasO] = nCurWeightContentO; 
				nCurWasO++;

				fWeightContentO[nCurWeightContentO] += calcs.percent_oxides[cur_molecule]
					*fWeightPortionsO[cur_molecule][cur_atom];
				nCurWeightContentO++;
			}
		}
	}

	int nQuantityElemO = nCurWeightContentO;

	float fConditChimFormO[MaxAtoms];			// Условн. хим. формула окислителя
	memset (fConditChimFormO,0,sizeof(fConditChimFormO));

// расчет условной химической формулы окислителя
// при условном молекулярном весе == 100
	for(int cur_elem=0;cur_elem<nQuantityElemO;cur_elem++)
	{
		int index;
		index = GetSN(szWasO[cur_elem]);
		fConditChimFormO[cur_elem] = 
			fWeightContentO[cur_elem]*fConditMolecularWeightO
			/(float)M[index];
		/*
		//m_result += szWasO[cur_elem];
		//m_result+="(";
		gcvt(fConditChimFormO[cur_elem], 4, fstr);
		//для красоты
		if((fstr[strlen(fstr)-1])=='.')
			fstr[strlen(fstr)-1]=0;
		//m_result+=fstr;
		//m_result+=") ";		*/
	}


// "Условная хим. формула горючего";
	float fMolecWeightC[MaxEditBoxes];								// Молекулярные веса компонентов горючего
	memset (fMolecWeightC,0,sizeof(fMolecWeightC));
	float fWeightPortionsC[MaxEditBoxes][MaxAtoms];			// Весовые доли
	memset (fWeightPortionsC,0,sizeof(fWeightPortionsC));

	for(cur_molecule=0;cur_molecule<calcs.nEditBoxesComb;cur_molecule++)
	{
		//int nAtoms;
		//for(nAtoms=0;(int)szNameAtomOfCombust[cur_molecule][nAtoms]!=0;nAtoms++)
		//	;

		int index;
// Расчитываем молекулярные веса компонентов горючего
		for(int cur_atom=0;cur_atom<calcs.nAtomsInStringComb[cur_molecule];cur_atom++)
		{	// Осутствует проверка GetSN
			index = GetSN(calcs.szNameAtomOfCombust[cur_molecule][cur_atom]);
			fMolecWeightC[cur_molecule] += (float)M[index]
				* calcs.factor_combust[cur_molecule][cur_atom];
		}

		//fWeightPortionsC[cur_molecule] = new float[calcs.nAtomsInStringComb[cur_molecule]];
// Расчитываем весовые доли элементов в компонентах горючего
		for(cur_atom=0;cur_atom<calcs.nAtomsInStringComb[cur_molecule];cur_atom++)
		{	// Осутствует проверка GetSN
			index = GetSN(calcs.szNameAtomOfCombust[cur_molecule][cur_atom]);
			fWeightPortionsC[cur_molecule][cur_atom] = (float)(M[index] * calcs.factor_combust[cur_molecule][cur_atom])
				/fMolecWeightC[cur_molecule];
		}
	}

// Весовое содержание элементов в горючем
	float fWeightContentC[MaxAtoms];
	memset (fWeightContentC,0,sizeof(fWeightContentC));
	int nCurWeightContentC;

	char szWasC[MaxAtoms][MaxAtomNameLen];
	memset (szWasC,0,sizeof(szWasC));
	int nWasC[MaxAtoms];
	memset (nWasC,0,sizeof(nWasC));
	int	nCurWasC = 0;

	nCurWeightContentC = 0;
	for(cur_molecule=0;cur_molecule<calcs.nEditBoxesComb;cur_molecule++)
	{
		//int nAtoms;
		//for(nAtoms=0;(int)szNameAtomOfCombust[cur_molecule][nAtoms]!=0;nAtoms++)
		//	;
		BOOL bWasFlag;
		for(int cur_atom=0;cur_atom<calcs.nAtomsInStringComb[cur_molecule];cur_atom++)
		{
			bWasFlag = FALSE;
			for(int f=0;f<nCurWasC;f++) 
			{
				if (!strcmp(szWasC[f],
					calcs.szNameAtomOfCombust[cur_molecule][cur_atom]) )
				{
					bWasFlag = TRUE;
					break;
				}
			}

			if (bWasFlag)	// szWas[f] индекс повторяющегося элемента
			{
				fWeightContentC[nWasC[f]] += calcs.percent_combust[cur_molecule]
					*fWeightPortionsC[cur_molecule][cur_atom];
			}
			else
			{
				strcpy(szWasC[nCurWasC], calcs.szNameAtomOfCombust[cur_molecule][cur_atom]);
				nWasC[nCurWasC] = nCurWeightContentC; 
				nCurWasC++;

				fWeightContentC[nCurWeightContentC] += calcs.percent_combust[cur_molecule]
					*fWeightPortionsC[cur_molecule][cur_atom];
				nCurWeightContentC++;
			}
		}
	}
	
	int nQuantityElemC = nCurWeightContentC;

	float fConditChimFormC[MaxAtoms];			// Условн. хим. формула горючего
	memset (fConditChimFormC,0,sizeof(fConditChimFormC));

// 1.д) Расчет условной химической формулы горючего
// при условном молекулярном весе == ConditMolecularWeightC
	for(cur_elem=0;cur_elem<nQuantityElemC;cur_elem++)
	{
		int index;
		index = GetSN(szWasC[cur_elem]);
		fConditChimFormC[cur_elem] = 
			fWeightContentC[cur_elem] * fConditMolecularWeightC
			/(float)M[index];
		/*
		//m_result += szWasC[cur_elem];
		//m_result+="(";
		gcvt(fConditChimFormC[cur_elem], 4, fstr);
		//для красоты
		if((fstr[strlen(fstr)-1])=='.')
			fstr[strlen(fstr)-1]=0;
		//m_result+=fstr;
		//m_result+=") ";
		*/
	}

// 2. Определим стехиометрическое соотношение горючего и
// окислителя
// Chi_штрих_0

	// в числителе
	float fNumerator = 0;
	for(cur_elem=0;cur_elem<nQuantityElemC;cur_elem++) {
		int index = GetSN(szWasC[cur_elem]);
		fNumerator += Valence[index] * fConditChimFormC[cur_elem];
	}

	// в знаменателе
	float fDenominator = 0;
	for(cur_elem=0;cur_elem<nQuantityElemO;cur_elem++) {
		int index = GetSN(szWasO[cur_elem]);
		fDenominator += Valence[index] * fConditChimFormO[cur_elem];
	}
	float fChiStroke0 = -fNumerator/fDenominator;

// Весовое стехиометрическое соотношение
// Chi 0
	float fChi0 = (fConditMolecularWeightO
		/fConditMolecularWeightC) * fChiStroke0;

// 3. Определим действительное соотношение компонентов
// Chi
	float fChi = calcs.fAlfa[0] * fChi0;

	//fChi = (float)2.65; //Ошибка в старой белой методичке

// 4. Определяем весовые доли элементов в составе топлива
	float fWeightPortionsF[MaxAtoms];

	BOOL bWasCalculated[MaxAtoms];
	memset(bWasCalculated,0,sizeof(bWasCalculated));

	// Возмем элемент горючего
	// и поищем во всех элементах окислителя такой же
	for(cur_elem=0;cur_elem<nQuantityElemC;cur_elem++)
	{
		fWeightPortionsF[cur_elem] = fWeightContentC[cur_elem];
		strcpy(uxf.szAtomsOfF[cur_elem],szWasC[cur_elem]);

		for(int elemO=0;elemO<nQuantityElemO;elemO++)
		{
			if(!strcmp(szWasC[cur_elem],szWasO[elemO]))
			{
				fWeightPortionsF[cur_elem] 
					+= fChi*fWeightContentO[elemO];
				bWasCalculated[elemO]=TRUE;
				break;
			}
		}
		fWeightPortionsF[cur_elem] /= (1 + fChi);
	}
	uxf.nQuantityElemInFuel = cur_elem;

	// Поишем неучтенные элементы окислителя
	for(cur_elem=0;cur_elem<nQuantityElemO;cur_elem++)
	{
		if(!bWasCalculated[cur_elem])// Если нашли неучтенный элемент
		{
			fWeightPortionsF[uxf.nQuantityElemInFuel] 
				= (fChi*fWeightContentO[cur_elem]) / (1 + fChi);
			strcpy(uxf.szAtomsOfF[uxf.nQuantityElemInFuel],szWasO[cur_elem]);
			uxf.nQuantityElemInFuel ++;
		}
	}

// 5. Определяем состав топлива
// (расчет условной химической формулы топлива)
	//m_result += cf;
	//m_result += cf;
	//m_result += "Условная хим. формула топлива:";
	//m_result += cf;

	for(cur_elem=0;cur_elem<uxf.nQuantityElemInFuel;cur_elem++)
	{
		int index;
		index = GetSN(uxf.szAtomsOfF[cur_elem]);
		uxf.fConditChimFormF[cur_elem] =
			fWeightPortionsF[cur_elem] * 1000 / (float)M[index];
		/*
		//m_result += szAtomsOfF[cur_elem];
		//m_result+="(";
		gcvt(fConditChimFormF[cur_elem], 4, fstr);
		//для красоты
		if((fstr[strlen(fstr)-1])=='.')
			fstr[strlen(fstr)-1]=0;
		//m_result+=fstr;
		//m_result+=") ";
		*/
	}
	return TRUE;
}
