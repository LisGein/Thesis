// FieldInput.cpp : implementation file
//

#include "stdafx.h"
#include "ThermoCalc.h"
#include "FieldInput.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

BOOL bNotSelectedFont = TRUE;
/////////////////////////////////////////////////////////////////////////////
// FieldInput

FieldInput::FieldInput() { nItems = 0; nLeft =0; nTop = 0; }

FieldInput::~FieldInput() {
	for (int i=0;i<nItems;i++) {
		BOOL bR = EO[i].DestroyWindow();
		// Percent
		bR = EOP[i].DestroyWindow();
		// Percent spin
		bR = SpinO[i].DestroyWindow();
		// Enthalpy
		bR = EENT[i].DestroyWindow();
	}
}

BOOL FieldInput::Add(CWnd *pTCV, char *szFormul, char *szPercent, char *szEnthalpy) {
	if (nItems < MaxEditBoxesOx) {
		// Formul
		int top = nTop + nItems*(cnBoxCommonHigh + cnBoxCommonVSpace);
		RECT rect = {nLeft, top};
		rect.right = rect.left + cnBoxFormulWidth;
		rect.bottom = rect.top + cnBoxCommonHigh;
		DWORD dwS = WS_CHILD|WS_VISIBLE|WS_BORDER|ES_AUTOHSCROLL;
		BOOL bEC = EO[nItems].Create(dwS, rect, pTCV, ID_START_ID_O+nItems);
		// Font
/*
void CEx05bView::OnPrepareDC(CDC- pDC, CPrintlnfo* plnfo) {
	CRect clientfiect;
	GetClientRect(clientRect);
	pDC->SetMapMode(MM_ANISOTROPIC); // +y = вниз
	pDC->SetWindowExt(400, 450);
	pDC->SetViewportExt(clientRect.right, clientRect.bottom);
	pDC->SetViewportOrg(0, 0);
}
void CExOSbView::TraceMetrics(CDC* pDC) {
	TEXTMETRIC tin;
	char szFaceName[100];
	pDC->GetTextMetrics(&tm);
	pDC->GetTextFace(99, szFaceName);
	TRACE(" font = %s, tmHeight = %d, tmlnternalLeading = %d,"
		" tmExternalLeadirig = %d\n", szFaceName, tm.tmHeight,
		tm.tmlnternalLeading, tm.trnExternalLeading);
}
		CFont fontTestl. fontTest2, fontTest3, fontTest4;
		fontTest1.CreateFont(50, 0, 0, 0, 400. FALSE, FALSE, 0,
			ANSI_CHARSET, OUT_DEFAULT_PflECIS,
			CLIP_DEFAULT_PRECIS. DEFAULTJIUALITY,
			DEFAULT_PITCH | FF_SWISS, "Arial");
		CFont* pOldFont = pDC->SelectObject(&fontTest1);
		TraceMetrics(pDC);
		pDC->TextOut(0, 0, "Это Arial, ширина по умолчанию");
		fontTest2.CreateFont(50, 0, 0, 0, 400, FALSE, FALSE, 0,
			ANSI_CHARSET, OUT_DEFAULT_PRECIS,
			CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY,
			OEFAULT_PITCH | FF.MODERN, "Courier");
		// не TrueType
		pDC->SelectObject(&fontTest2);
		TraceMetrics(pDC);
		pDC->TextOut(0, 100, "Это Courier, ширина по умолчанию");
		fontTest3.CreateFont(50, 10, 0, 0, 400, FALSE, FALSE, 0,
			ANSI.CHARSET, OUT_DEFAULT_PRECIS,
			CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY,
			DEFAULT.PITCH | FF_ROHAN. NULL);
		pDC->SelectObj ect(&fontTestS>;
		TraceHetrics(pDC);
		pDC->TextOut(0, 200, "Это типовой Roman, переменная ширина"};
		fontTest4.CreateFont(50, О, О, О, 400, FALSE, FALSE, О,
			ANSI_CHARSET, OUT_DEFAULT_PRECIS,
			CLIP_DEFAULT_PRECIS, DEFAULTJJUALUY,
			DEFAULT_PITCH | FF_MOOERM, "LinePrinter");
		pDC->SelectObject(4fontTest4);
		TraceMetrics(pDC);
		pDC->TextOut{0, 300, "Это LinePrinter, ширина по умолчанию");
		pDC->SelectObject(p01dFont);
*/

		CDC *pDC = EO[nItems].GetDC();
		CWnd *pW = pDC ->GetWindow();
//		CWindowDC *pWDC = (CWindowDC *)EO[nItems].GetWindowDC();
		CDC *pWDC = EO[nItems].GetWindowDC();
		pW = pWDC ->GetWindow();
		//LOGFONT alf[10];
		//pDC ->GetObject (10,&alf);
		//UINT uiT = pDC ->GetObjectType();
/*
		CFont fontTest1;
		fontTest1.CreateFont(50, 0, 0, 0, 400, FALSE, FALSE, 0,
			ANSI_CHARSET, OUT_DEFAULT_PRECIS,
			CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY,
			DEFAULT_PITCH | FF_SWISS, "Arial");
		CFont* pOldFont = pDC->SelectObject(&fontTest1);
*/
/*
		if (bNotSelectedFont) {
			CFontDialog fdFont( NULL, CF_EFFECTS | CF_SCREENFONTS, NULL, pTCV );
			if (fdFont.DoModal() == IDOK) {
//				CHARFORMAT m_charformat;
//				fdFont.GetCharFormat(m_charformat);
//				HWND h = EO[nItems].m_hWnd;
//				m_charformat.cbSize = sizeof(CHARFORMAT);
//				::SendMessage(h, EM_SETCHARFORMAT, SCF_ALL, (LPARAM)&m_charformat);
//				LOGFONT lf;
//				fdFont.GetCurrentFont(&lf);
//				CFont font;
//				font.CreateFontIndirect(&lf);
//				pWDC ->SelectObject(&font);
			}
			bNotSelectedFont = FALSE;
		}
*/

		CHARFORMAT m_charformat;
		memset(&m_charformat, 0, sizeof(m_charformat));
		m_charformat.dwMask = CFM_ITALIC;					// CFM_BOLD;
		m_charformat.dwEffects = CFE_ITALIC;
		EO[nItems].SetDefaultCharFormat(m_charformat);

		EO[nItems].SetWindowText(szFormul);
		pTCV ->InvalidateRect(&rect);

		// Percent
		rect.left = nLeft + cnBoxFormulWidth + cnBoxCommonHSpace;
		rect.top = nTop + nItems*(cnBoxCommonHigh + cnBoxCommonVSpace);
		rect.right = rect.left + cnBoxPercentWidth;
		rect.bottom = rect.top + cnBoxCommonHigh;
		bEC = EOP[nItems].Create(dwS, rect, pTCV, ID_START_ID_OP+nItems);
		int nPercent = atoi(szPercent);
		if ((nPercent>100)||(nPercent<0))
			nPercent = 0;
		if (nPercent)
			EOP[nItems].SetWindowText(szPercent);
		else
			EOP[nItems].SetWindowText("0");

		pTCV ->InvalidateRect(&rect);

		// Percent spin
		rect.left = nLeft + cnBoxFormulWidth + cnBoxCommonHSpace + cnBoxPercentWidth;
		rect.top = nTop + nItems*(cnBoxCommonHigh + cnBoxCommonVSpace);
		rect.right = rect.left + cnSpinWidth;
		rect.bottom = rect.top + cnSpinHigh;
		bEC = SpinO[nItems].Create(WS_CHILD|WS_VISIBLE, rect, pTCV, ID_START_ID_OSPIN+nItems);
		SpinO[nItems].SetRange(0,100);
		SpinO[nItems].SetBase(1);
		if (nPercent)
			SpinO[nItems].SetPos(nPercent);
		else
			SpinO[nItems].SetPos(0);
		SpinO[nItems].SetBuddy(pTCV);
		pTCV ->InvalidateRect(&rect);

		// Enthalpy
		rect.left = nLeft + cnBoxFormulWidth + cnBoxPercentWidth + cnSpinWidth + cnBoxCommonHSpace*2;
		rect.top = nTop + nItems*(cnBoxCommonHigh + cnBoxCommonVSpace);
		rect.right = rect.left + cnBoxEnthalpyWidth;
		rect.bottom = rect.top + cnBoxCommonHigh;
		bEC = EENT[nItems].Create(dwS, rect, pTCV, ID_START_ID_OENT+nItems);
		EENT[nItems].SetWindowText(szEnthalpy);
		pTCV ->InvalidateRect(&rect);

		nItems++;
		return TRUE;
	}
	else {
		MessageBeep(MB_OK);	//MB_ICONEXCLAMATION
		return FALSE;
	}
}

BOOL FieldInput::Add(CWnd *pTCV, CString &sFormul, CString &sPercent, CString &sEnthalpy) {
	char *pszF = sFormul.GetBuffer(MAX_len);
	char *pszP = sPercent.GetBuffer(MAX_len);
	char *pszE = sEnthalpy.GetBuffer(MAX_len);
	BOOL bR = Add(pTCV, pszF, pszP, pszE);
	sFormul.ReleaseBuffer();
	sPercent.ReleaseBuffer();
	sEnthalpy.ReleaseBuffer();
	return bR;
}

BOOL FieldInput::Add(CWnd *pTCV, CString &sFormul, int nPercent, CString &sEnthalpy) {
	char *pszF = sFormul.GetBuffer(MAX_len);
	char *pszE = sEnthalpy.GetBuffer(MAX_len);
	gcvt(nPercent, 3, szTemp);
	if(szTemp[strlen(szTemp) - 1] == '.')
		szTemp[strlen(szTemp) - 1] = 0;
	BOOL bR = Add(pTCV, pszF, szTemp, pszE);
	sFormul.ReleaseBuffer();
	sEnthalpy.ReleaseBuffer();
	return bR;
}

BOOL FieldInput::Add(CWnd *pTCV, char *pszFormul, int nPercent, char *pszEnthalpy) {
	gcvt(nPercent, 3, szTemp);
	if(szTemp[strlen(szTemp) - 1] == '.')
		szTemp[strlen(szTemp) - 1] = 0;
	BOOL bR = Add(pTCV, pszFormul, szTemp, pszEnthalpy);
	return bR;
}

BOOL FieldInput::Add(CWnd *pTCV) {
	char szFormul[] = "0";
	char szPercent[] = "0";
	char szEnthalpy[] = "0";
	return Add(pTCV, szFormul, 0, szEnthalpy);
}

/////////////////////////////////////////////////////////////////////////////
// FieldInput message handlers

BOOL FieldInput::Remove() {
	if (nItems > 1) {
		nItems--;
		BOOL bR = EO[nItems].DestroyWindow();
		// Percent
		bR = EOP[nItems].DestroyWindow();

		// Percent spin
		bR = SpinO[nItems].DestroyWindow();

		// Enthalpy
		bR = EENT[nItems].DestroyWindow();
		return TRUE;
	}
	else {
		MessageBeep(MB_OK);								// MB_ICONEXCLAMATION
		return FALSE;
	}
}

BOOL FieldInput::Scroll(UINT nSBCode, UINT nPos, CScrollBar *pScrollBar) {
	for (int i1=0;i1<nItems;i1++)
		if ((&SpinO[i1]) == (CSpinButtonCtrl *) pScrollBar) {
			switch(nSBCode)
			{
				// Scroll to the absolute position. The current position is provided in nPos.
				case SB_THUMBPOSITION:
					//nOxP[i1] = nPos;
					//SpinO[i1].SetPos(nOxP[i1]);
					gcvt((int)nPos,3,szTemp);
					if(szTemp[strlen(szTemp) - 1] == '.')
						szTemp[strlen(szTemp) - 1] = 0;
					EOP[i1].SetWindowText(szTemp);
					return TRUE;
				break;
			}
			break; // для for()
		}
	return FALSE;
}

BOOL FieldInput::SetFormulText(int nCurrentItem, char *psz) {
	if (nCurrentItem < nItems) {
		EO[nCurrentItem].SetWindowText(psz);
		return TRUE;
	}
	return FALSE;
}

BOOL FieldInput::SetFormulText(int nCurrentItem, CString &sOx) {
	if (nCurrentItem < nItems) {
		EO[nCurrentItem].SetWindowText((LPCTSTR)sOx);
		return TRUE;
	}
	return FALSE;
}

BOOL FieldInput::SetPercentText(int nCurrentItem, char *psz) {
	if (nCurrentItem < nItems) {
		EOP[nCurrentItem].SetWindowText(psz);
		SpinO[nCurrentItem].SetPos(atoi(psz));
		return TRUE;
	}
	return FALSE;
}

BOOL FieldInput::SetPercentText(int nCurrentItem, CString &sOxP) {
	if (nCurrentItem < nItems) {
		EOP[nCurrentItem].SetWindowText((LPCTSTR)sOxP);
		char * p = sOxP.GetBuffer(10);
		SpinO[nCurrentItem].SetPos(atoi(p));
		sOxP.ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}

BOOL FieldInput::SetPercentText(int nCurrentItem, int &_nOxP) {
	if (nCurrentItem < nItems) {
		SpinO[nCurrentItem].SetPos(_nOxP);
		gcvt((int)_nOxP, 3, szTemp);
		if(szTemp[strlen(szTemp) - 1] == '.')
			szTemp[strlen(szTemp) - 1] = 0;
		EOP[nCurrentItem].SetWindowText(szTemp);
		return TRUE;
	}
	return FALSE;
}

BOOL FieldInput::SetEnthalpyText(int nCurrentItem, char *psz) {
	if (nCurrentItem < nItems) {
		EENT[nCurrentItem].SetWindowText(psz);
		return TRUE;
	}
	return FALSE;
}

BOOL FieldInput::SetEnthalpyText(int nCurrentItem, CString &_sEnth) {
	if (nCurrentItem < nItems) {
		EENT[nCurrentItem].SetWindowText((LPCTSTR)_sEnth);
		return TRUE;
	}
	return FALSE;
}

BOOL FieldInput::SetEnthalpyText(int nCurrentItem, int &_sEnth) {
	if (nCurrentItem < nItems) {
		gcvt((int)_sEnth, 3, szTemp);
		if(szTemp[strlen(szTemp) - 1] == '.')
			szTemp[strlen(szTemp) - 1] = 0;
		EENT[nCurrentItem].SetWindowText(szTemp);
		return TRUE;
	}
	return FALSE;
}

int FieldInput::GetCountItems()	{	return nItems;	}

BOOL FieldInput::GetFormul(int nCurrentItem, CString &_sOx) {
	if (nCurrentItem < nItems) {
		EO[nCurrentItem].GetWindowText(_sOx);
		return TRUE;
	}
	return FALSE;
}

BOOL FieldInput::GetPercent(int nCurrentItem, CString &_sOxP) {
	if (nCurrentItem < nItems) {
		EOP[nCurrentItem].GetWindowText(_sOxP);
		return TRUE;
	}
	return FALSE;	
}

void FieldInput::Coordinate(int &_nLeft, int &_nTop)	{	nLeft = _nLeft;	nTop = _nTop;	}
void FieldInput::Coordinate(const int _nLeft, const int _nTop)	{	nLeft = _nLeft;	nTop = _nTop;	}

void FieldInput::EnableWindow(BOOL bEnable)
{
	for (int i =0; i<nItems; i++) {	
		EO[i].EnableWindow(bEnable);
		EOP[i].EnableWindow(bEnable);
		SpinO[i].EnableWindow(bEnable);
		EENT[i].EnableWindow(bEnable);
	}
}

/////////////////////////////////////////////////////////////////////////////
// FieldInputH


FieldInputH::FieldInputH() { nItems = 0; nLeft =0; nTop = 0; }

FieldInputH::~FieldInputH() {
	for (int i=0;i<nItems;i++)
		BOOL bR = FIH[i].DestroyWindow();
}

BOOL FieldInputH::Add(CWnd *pTCV) {
	if (nItems < MaxQuantityAlfaAndP) {
		int left = nLeft + nItems*(cnBoxFIHWidth + cnBoxCommonHSpace);
		RECT rect = {left, nTop};
		rect.right = rect.left + cnBoxFIHWidth;
		rect.bottom = rect.top + cnBoxCommonHigh;
		DWORD dwS = WS_CHILD|WS_VISIBLE|WS_BORDER|ES_AUTOHSCROLL;
		BOOL bEC = FIH[nItems].Create(dwS, rect, pTCV, ID_START_ID_O+nItems);
		FIH[nItems].SetWindowText("0");
		pTCV ->InvalidateRect(&rect);
		nItems++;
		return TRUE;
	}
	else {
		MessageBeep(MB_OK);	//MB_ICONEXCLAMATION
		return FALSE;
	}
}

BOOL FieldInputH::Remove() {
	if (nItems > 1) {
		nItems--;
		BOOL bR = FIH[nItems].DestroyWindow();
		return TRUE;
	}
	else {
		MessageBeep(MB_OK);								// MB_ICONEXCLAMATION
		return FALSE;
	}
}

BOOL FieldInputH::SetText(int nCurrentItem, char *psz) {
	if (nCurrentItem < nItems) {
		FIH[nCurrentItem].SetWindowText(psz);
		return TRUE;
	}
	return FALSE;
}

BOOL FieldInputH::SetText(int nCurrentItem, CString &_s) {
	if (nCurrentItem < nItems) {
		FIH[nCurrentItem].SetWindowText((LPCTSTR)_s);
		return TRUE;
	}
	return FALSE;
}

BOOL FieldInputH::SetText(int nCurrentItem, double &_d) {
	if (nCurrentItem < nItems) {
		gcvt(_d, 3, szTemp);
		if(szTemp[strlen(szTemp) - 1] == '.')
			szTemp[strlen(szTemp) - 1] = 0;
		FIH[nCurrentItem].SetWindowText(szTemp);
		return TRUE;
	}
	return FALSE;
}
BOOL FieldInputH::SetText(int nCurrentItem, const double &_d) {
	if (nCurrentItem < nItems) {
		gcvt(_d, 3, szTemp);
		if(szTemp[strlen(szTemp) - 1] == '.')
			szTemp[strlen(szTemp) - 1] = 0;
		FIH[nCurrentItem].SetWindowText(szTemp);
		return TRUE;
	}
	return FALSE;
}

int FieldInputH::GetCountItems()	{	return nItems;	}

BOOL FieldInputH::GetText(int nCurrentItem, CString &_s) {
	if (nCurrentItem < nItems) {
		FIH[nCurrentItem].GetWindowText(_s);
		return TRUE;
	}
	return FALSE;
}

void FieldInputH::Coordinate(int &_nLeft, int &_nTop)	{	nLeft = _nLeft;	nTop = _nTop;	}
void FieldInputH::Coordinate(const int _nLeft, const int _nTop)	{	nLeft = _nLeft;	nTop = _nTop;	}
